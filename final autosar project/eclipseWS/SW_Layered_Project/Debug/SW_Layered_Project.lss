
SW_Layered_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ca2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  00800060  00000ca2  00000d36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800144  00800144  00000e1a  2**0
                  ALLOC
  3 .stab         000021fc  00000000  00000000  00000e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002075  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 34       	cpi	r26, 0x44	; 68
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a4 e4       	ldi	r26, 0x44	; 68
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 35       	cpi	r26, 0x53	; 83
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 44 06 	call	0xc88	; 0xc88 <main>
  8a:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Port_getPinPointers>:
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <Port_getPinPointers+0x6>
  98:	0f 92       	push	r0
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	89 83       	std	Y+1, r24	; 0x01
  a0:	7b 83       	std	Y+3, r23	; 0x03
  a2:	6a 83       	std	Y+2, r22	; 0x02
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	88 30       	cpi	r24, 0x08	; 8
  a8:	88 f4       	brcc	.+34     	; 0xcc <Port_getPinPointers+0x3a>
  aa:	ea 81       	ldd	r30, Y+2	; 0x02
  ac:	fb 81       	ldd	r31, Y+3	; 0x03
  ae:	8a e3       	ldi	r24, 0x3A	; 58
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	91 83       	std	Z+1, r25	; 0x01
  b4:	80 83       	st	Z, r24
  b6:	ea 81       	ldd	r30, Y+2	; 0x02
  b8:	fb 81       	ldd	r31, Y+3	; 0x03
  ba:	8b e3       	ldi	r24, 0x3B	; 59
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	93 83       	std	Z+3, r25	; 0x03
  c0:	82 83       	std	Z+2, r24	; 0x02
  c2:	ea 81       	ldd	r30, Y+2	; 0x02
  c4:	fb 81       	ldd	r31, Y+3	; 0x03
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	84 83       	std	Z+4, r24	; 0x04
  ca:	47 c0       	rjmp	.+142    	; 0x15a <Port_getPinPointers+0xc8>
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	88 30       	cpi	r24, 0x08	; 8
  d0:	a8 f0       	brcs	.+42     	; 0xfc <Port_getPinPointers+0x6a>
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	80 31       	cpi	r24, 0x10	; 16
  d6:	90 f4       	brcc	.+36     	; 0xfc <Port_getPinPointers+0x6a>
  d8:	ea 81       	ldd	r30, Y+2	; 0x02
  da:	fb 81       	ldd	r31, Y+3	; 0x03
  dc:	87 e3       	ldi	r24, 0x37	; 55
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	91 83       	std	Z+1, r25	; 0x01
  e2:	80 83       	st	Z, r24
  e4:	ea 81       	ldd	r30, Y+2	; 0x02
  e6:	fb 81       	ldd	r31, Y+3	; 0x03
  e8:	88 e3       	ldi	r24, 0x38	; 56
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	93 83       	std	Z+3, r25	; 0x03
  ee:	82 83       	std	Z+2, r24	; 0x02
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	88 50       	subi	r24, 0x08	; 8
  f4:	ea 81       	ldd	r30, Y+2	; 0x02
  f6:	fb 81       	ldd	r31, Y+3	; 0x03
  f8:	84 83       	std	Z+4, r24	; 0x04
  fa:	2f c0       	rjmp	.+94     	; 0x15a <Port_getPinPointers+0xc8>
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	80 31       	cpi	r24, 0x10	; 16
 100:	a8 f0       	brcs	.+42     	; 0x12c <Port_getPinPointers+0x9a>
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	88 31       	cpi	r24, 0x18	; 24
 106:	90 f4       	brcc	.+36     	; 0x12c <Port_getPinPointers+0x9a>
 108:	ea 81       	ldd	r30, Y+2	; 0x02
 10a:	fb 81       	ldd	r31, Y+3	; 0x03
 10c:	84 e3       	ldi	r24, 0x34	; 52
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	91 83       	std	Z+1, r25	; 0x01
 112:	80 83       	st	Z, r24
 114:	ea 81       	ldd	r30, Y+2	; 0x02
 116:	fb 81       	ldd	r31, Y+3	; 0x03
 118:	85 e3       	ldi	r24, 0x35	; 53
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	93 83       	std	Z+3, r25	; 0x03
 11e:	82 83       	std	Z+2, r24	; 0x02
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	80 51       	subi	r24, 0x10	; 16
 124:	ea 81       	ldd	r30, Y+2	; 0x02
 126:	fb 81       	ldd	r31, Y+3	; 0x03
 128:	84 83       	std	Z+4, r24	; 0x04
 12a:	17 c0       	rjmp	.+46     	; 0x15a <Port_getPinPointers+0xc8>
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	88 31       	cpi	r24, 0x18	; 24
 130:	a0 f0       	brcs	.+40     	; 0x15a <Port_getPinPointers+0xc8>
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	80 32       	cpi	r24, 0x20	; 32
 136:	88 f4       	brcc	.+34     	; 0x15a <Port_getPinPointers+0xc8>
 138:	ea 81       	ldd	r30, Y+2	; 0x02
 13a:	fb 81       	ldd	r31, Y+3	; 0x03
 13c:	81 e3       	ldi	r24, 0x31	; 49
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	91 83       	std	Z+1, r25	; 0x01
 142:	80 83       	st	Z, r24
 144:	ea 81       	ldd	r30, Y+2	; 0x02
 146:	fb 81       	ldd	r31, Y+3	; 0x03
 148:	82 e3       	ldi	r24, 0x32	; 50
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	93 83       	std	Z+3, r25	; 0x03
 14e:	82 83       	std	Z+2, r24	; 0x02
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	88 51       	subi	r24, 0x18	; 24
 154:	ea 81       	ldd	r30, Y+2	; 0x02
 156:	fb 81       	ldd	r31, Y+3	; 0x03
 158:	84 83       	std	Z+4, r24	; 0x04
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	cf 91       	pop	r28
 162:	df 91       	pop	r29
 164:	08 95       	ret

00000166 <Port_Init>:
	Parameters(inout):	None
	Parameters (out): 	None
	Return value: 		None
	Description: 		Initializes the Port Driver module.
 **********************************************************************************************************/
void Port_Init(const Port_ConfigType *ConfigPtr){
 166:	df 93       	push	r29
 168:	cf 93       	push	r28
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	28 97       	sbiw	r28, 0x08	; 8
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	de bf       	out	0x3e, r29	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	cd bf       	out	0x3d, r28	; 61
 17a:	98 87       	std	Y+8, r25	; 0x08
 17c:	8f 83       	std	Y+7, r24	; 0x07
				PORT_INIT_API_ID,
				PORT_E_PARAM_CONFIG
		);
	}
#endif
	g_cfgPtr = (Port_ConfigType *)ConfigPtr;
 17e:	8f 81       	ldd	r24, Y+7	; 0x07
 180:	98 85       	ldd	r25, Y+8	; 0x08
 182:	90 93 45 01 	sts	0x0145, r25
 186:	80 93 44 01 	sts	0x0144, r24

	Port_PinType pinConfigIndex = 0;			/*variable to loop through Configuration structure*/
 18a:	19 82       	std	Y+1, r1	; 0x01
	Port_ATmega16PinDataType ATmega16PinData;	/*variable to hold data pointers to DDR , PORT registers and pin number in ATMEGA 16 */

	for(pinConfigIndex = 0 ; pinConfigIndex<MCU_PIN_NUM ; pinConfigIndex++){
 18c:	19 82       	std	Y+1, r1	; 0x01
 18e:	ce c0       	rjmp	.+412    	; 0x32c <Port_Init+0x1c6>
		Port_getPinPointers(pinConfigIndex , &ATmega16PinData);
 190:	9e 01       	movw	r18, r28
 192:	2e 5f       	subi	r18, 0xFE	; 254
 194:	3f 4f       	sbci	r19, 0xFF	; 255
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	b9 01       	movw	r22, r18
 19a:	0e 94 49 00 	call	0x92	; 0x92 <Port_getPinPointers>
		/*----------------------------------------- configure pin direction -----------------------------------------------------*/
		WRITE_BIT(	*ATmega16PinData.directionReg, ATmega16PinData.pinnum, ConfigPtr->PinConfig[pinConfigIndex].PortPinDirection);
 19e:	aa 81       	ldd	r26, Y+2	; 0x02
 1a0:	bb 81       	ldd	r27, Y+3	; 0x03
 1a2:	ea 81       	ldd	r30, Y+2	; 0x02
 1a4:	fb 81       	ldd	r31, Y+3	; 0x03
 1a6:	80 81       	ld	r24, Z
 1a8:	48 2f       	mov	r20, r24
 1aa:	8e 81       	ldd	r24, Y+6	; 0x06
 1ac:	28 2f       	mov	r18, r24
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <Port_Init+0x54>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	2a 95       	dec	r18
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <Port_Init+0x50>
 1be:	80 95       	com	r24
 1c0:	64 2f       	mov	r22, r20
 1c2:	68 23       	and	r22, r24
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	4f 81       	ldd	r20, Y+7	; 0x07
 1cc:	58 85       	ldd	r21, Y+8	; 0x08
 1ce:	c9 01       	movw	r24, r18
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	82 1b       	sub	r24, r18
 1de:	93 0b       	sbc	r25, r19
 1e0:	fa 01       	movw	r30, r20
 1e2:	e8 0f       	add	r30, r24
 1e4:	f9 1f       	adc	r31, r25
 1e6:	80 81       	ld	r24, Z
 1e8:	28 2f       	mov	r18, r24
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	8e 81       	ldd	r24, Y+6	; 0x06
 1ee:	88 2f       	mov	r24, r24
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	a9 01       	movw	r20, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <Port_Init+0x94>
 1f6:	44 0f       	add	r20, r20
 1f8:	55 1f       	adc	r21, r21
 1fa:	8a 95       	dec	r24
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <Port_Init+0x90>
 1fe:	ca 01       	movw	r24, r20
 200:	86 2b       	or	r24, r22
 202:	8c 93       	st	X, r24
		if(ConfigPtr->PinConfig[pinConfigIndex].PortPinDirection == PORT_PIN_IN){
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	4f 81       	ldd	r20, Y+7	; 0x07
 20c:	58 85       	ldd	r21, Y+8	; 0x08
 20e:	c9 01       	movw	r24, r18
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	82 1b       	sub	r24, r18
 21e:	93 0b       	sbc	r25, r19
 220:	fa 01       	movw	r30, r20
 222:	e8 0f       	add	r30, r24
 224:	f9 1f       	adc	r31, r25
 226:	80 81       	ld	r24, Z
 228:	88 23       	and	r24, r24
 22a:	a9 f5       	brne	.+106    	; 0x296 <Port_Init+0x130>
			/*-------------------------------------configure internal resistors ------------------------------------------------*/
			WRITE_BIT(	*ATmega16PinData.portReg, ATmega16PinData.pinnum, ConfigPtr->PinConfig[pinConfigIndex].PortPinIntRes);
 22c:	ac 81       	ldd	r26, Y+4	; 0x04
 22e:	bd 81       	ldd	r27, Y+5	; 0x05
 230:	ec 81       	ldd	r30, Y+4	; 0x04
 232:	fd 81       	ldd	r31, Y+5	; 0x05
 234:	80 81       	ld	r24, Z
 236:	48 2f       	mov	r20, r24
 238:	8e 81       	ldd	r24, Y+6	; 0x06
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <Port_Init+0xe2>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	2a 95       	dec	r18
 24a:	e2 f7       	brpl	.-8      	; 0x244 <Port_Init+0xde>
 24c:	80 95       	com	r24
 24e:	64 2f       	mov	r22, r20
 250:	68 23       	and	r22, r24
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	28 2f       	mov	r18, r24
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	4f 81       	ldd	r20, Y+7	; 0x07
 25a:	58 85       	ldd	r21, Y+8	; 0x08
 25c:	c9 01       	movw	r24, r18
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	82 1b       	sub	r24, r18
 26c:	93 0b       	sbc	r25, r19
 26e:	84 0f       	add	r24, r20
 270:	95 1f       	adc	r25, r21
 272:	fc 01       	movw	r30, r24
 274:	36 96       	adiw	r30, 0x06	; 6
 276:	80 81       	ld	r24, Z
 278:	28 2f       	mov	r18, r24
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	8e 81       	ldd	r24, Y+6	; 0x06
 27e:	88 2f       	mov	r24, r24
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	a9 01       	movw	r20, r18
 284:	02 c0       	rjmp	.+4      	; 0x28a <Port_Init+0x124>
 286:	44 0f       	add	r20, r20
 288:	55 1f       	adc	r21, r21
 28a:	8a 95       	dec	r24
 28c:	e2 f7       	brpl	.-8      	; 0x286 <Port_Init+0x120>
 28e:	ca 01       	movw	r24, r20
 290:	86 2b       	or	r24, r22
 292:	8c 93       	st	X, r24
 294:	48 c0       	rjmp	.+144    	; 0x326 <Port_Init+0x1c0>
		}
		else if(ConfigPtr->PinConfig[pinConfigIndex].PortPinDirection == PORT_PIN_OUT){
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	28 2f       	mov	r18, r24
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	4f 81       	ldd	r20, Y+7	; 0x07
 29e:	58 85       	ldd	r21, Y+8	; 0x08
 2a0:	c9 01       	movw	r24, r18
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	82 1b       	sub	r24, r18
 2b0:	93 0b       	sbc	r25, r19
 2b2:	fa 01       	movw	r30, r20
 2b4:	e8 0f       	add	r30, r24
 2b6:	f9 1f       	adc	r31, r25
 2b8:	80 81       	ld	r24, Z
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	a1 f5       	brne	.+104    	; 0x326 <Port_Init+0x1c0>
			/*-----------------------------------------configure pin level -----------------------------------------------------*/
			WRITE_BIT(	*ATmega16PinData.portReg, ATmega16PinData.pinnum, ConfigPtr->PinConfig[pinConfigIndex].PortPinLevelValue);
 2be:	ac 81       	ldd	r26, Y+4	; 0x04
 2c0:	bd 81       	ldd	r27, Y+5	; 0x05
 2c2:	ec 81       	ldd	r30, Y+4	; 0x04
 2c4:	fd 81       	ldd	r31, Y+5	; 0x05
 2c6:	80 81       	ld	r24, Z
 2c8:	48 2f       	mov	r20, r24
 2ca:	8e 81       	ldd	r24, Y+6	; 0x06
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <Port_Init+0x174>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	2a 95       	dec	r18
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <Port_Init+0x170>
 2de:	80 95       	com	r24
 2e0:	64 2f       	mov	r22, r20
 2e2:	68 23       	and	r22, r24
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	28 2f       	mov	r18, r24
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	4f 81       	ldd	r20, Y+7	; 0x07
 2ec:	58 85       	ldd	r21, Y+8	; 0x08
 2ee:	c9 01       	movw	r24, r18
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	82 1b       	sub	r24, r18
 2fe:	93 0b       	sbc	r25, r19
 300:	84 0f       	add	r24, r20
 302:	95 1f       	adc	r25, r21
 304:	fc 01       	movw	r30, r24
 306:	33 96       	adiw	r30, 0x03	; 3
 308:	80 81       	ld	r24, Z
 30a:	28 2f       	mov	r18, r24
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	8e 81       	ldd	r24, Y+6	; 0x06
 310:	88 2f       	mov	r24, r24
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	a9 01       	movw	r20, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <Port_Init+0x1b6>
 318:	44 0f       	add	r20, r20
 31a:	55 1f       	adc	r21, r21
 31c:	8a 95       	dec	r24
 31e:	e2 f7       	brpl	.-8      	; 0x318 <Port_Init+0x1b2>
 320:	ca 01       	movw	r24, r20
 322:	86 2b       	or	r24, r22
 324:	8c 93       	st	X, r24
	g_cfgPtr = (Port_ConfigType *)ConfigPtr;

	Port_PinType pinConfigIndex = 0;			/*variable to loop through Configuration structure*/
	Port_ATmega16PinDataType ATmega16PinData;	/*variable to hold data pointers to DDR , PORT registers and pin number in ATMEGA 16 */

	for(pinConfigIndex = 0 ; pinConfigIndex<MCU_PIN_NUM ; pinConfigIndex++){
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	89 83       	std	Y+1, r24	; 0x01
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	80 32       	cpi	r24, 0x20	; 32
 330:	08 f4       	brcc	.+2      	; 0x334 <Port_Init+0x1ce>
 332:	2e cf       	rjmp	.-420    	; 0x190 <Port_Init+0x2a>
		}
		else{
			/*no action*/
		}
	}
	Port_state = DIO_INITIALIZED;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	80 93 46 01 	sts	0x0146, r24
}
 33a:	28 96       	adiw	r28, 0x08	; 8
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
 346:	cf 91       	pop	r28
 348:	df 91       	pop	r29
 34a:	08 95       	ret

0000034c <Port_SetPinDirection>:
	Parameters(inout): 	None
	Parameters (out): 	None
	Return value: 		None
	Description: 		Sets the port pin direction
 **********************************************************************************************************/
void Port_SetPinDirection(Port_PinType Pin,Port_PinDirectionType Direction){
 34c:	df 93       	push	r29
 34e:	cf 93       	push	r28
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
 354:	27 97       	sbiw	r28, 0x07	; 7
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	de bf       	out	0x3e, r29	; 62
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	8e 83       	std	Y+6, r24	; 0x06
 362:	6f 83       	std	Y+7, r22	; 0x07
		);
	}
#endif
	Port_ATmega16PinDataType ATmega16PinData;

	if(g_cfgPtr->PinConfig[Pin].PortPinDirectionChangeable == TRUE){
 364:	40 91 44 01 	lds	r20, 0x0144
 368:	50 91 45 01 	lds	r21, 0x0145
 36c:	8e 81       	ldd	r24, Y+6	; 0x06
 36e:	28 2f       	mov	r18, r24
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	c9 01       	movw	r24, r18
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	82 1b       	sub	r24, r18
 382:	93 0b       	sbc	r25, r19
 384:	84 0f       	add	r24, r20
 386:	95 1f       	adc	r25, r21
 388:	fc 01       	movw	r30, r24
 38a:	31 96       	adiw	r30, 0x01	; 1
 38c:	80 81       	ld	r24, Z
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	41 f5       	brne	.+80     	; 0x3e2 <Port_SetPinDirection+0x96>
		Port_getPinPointers(Pin , &ATmega16PinData);									/*get the PORT , pin data out of PIN ID*/
 392:	8e 81       	ldd	r24, Y+6	; 0x06
 394:	9e 01       	movw	r18, r28
 396:	2f 5f       	subi	r18, 0xFF	; 255
 398:	3f 4f       	sbci	r19, 0xFF	; 255
 39a:	b9 01       	movw	r22, r18
 39c:	0e 94 49 00 	call	0x92	; 0x92 <Port_getPinPointers>
		/*----------configure pin direction ------------------------------*/
		WRITE_BIT(	*ATmega16PinData.directionReg, ATmega16PinData.pinnum, Direction);
 3a0:	a9 81       	ldd	r26, Y+1	; 0x01
 3a2:	ba 81       	ldd	r27, Y+2	; 0x02
 3a4:	e9 81       	ldd	r30, Y+1	; 0x01
 3a6:	fa 81       	ldd	r31, Y+2	; 0x02
 3a8:	80 81       	ld	r24, Z
 3aa:	48 2f       	mov	r20, r24
 3ac:	8d 81       	ldd	r24, Y+5	; 0x05
 3ae:	28 2f       	mov	r18, r24
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <Port_SetPinDirection+0x70>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	2a 95       	dec	r18
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <Port_SetPinDirection+0x6c>
 3c0:	80 95       	com	r24
 3c2:	48 23       	and	r20, r24
 3c4:	8f 81       	ldd	r24, Y+7	; 0x07
 3c6:	28 2f       	mov	r18, r24
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	8d 81       	ldd	r24, Y+5	; 0x05
 3cc:	88 2f       	mov	r24, r24
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	b9 01       	movw	r22, r18
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <Port_SetPinDirection+0x8c>
 3d4:	66 0f       	add	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	8a 95       	dec	r24
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <Port_SetPinDirection+0x88>
 3dc:	cb 01       	movw	r24, r22
 3de:	84 2b       	or	r24, r20
 3e0:	8c 93       	st	X, r24
				PORT_SET_PIN_DIRECTION_API_ID,
				PORT_E_DIRECTION_UNCHANGEABLE
		);
#endif
	}
}
 3e2:	27 96       	adiw	r28, 0x07	; 7
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	f8 94       	cli
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	cd bf       	out	0x3d, r28	; 61
 3ee:	cf 91       	pop	r28
 3f0:	df 91       	pop	r29
 3f2:	08 95       	ret

000003f4 <Port_RefreshPortDirection>:
	Parameters (inout): None
	Parameters (out): 	None
	Return value: 		None
	Description: 		Refreshes port direction.
 **********************************************************************************************************/
void Port_RefreshPortDirection(void){
 3f4:	df 93       	push	r29
 3f6:	cf 93       	push	r28
 3f8:	0f 92       	push	r0
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
				PORT_E_UNINIT
		);
	}
#endif
	uint8 portDirection;
	portDirection = DDRA_REG;
 3fe:	ea e3       	ldi	r30, 0x3A	; 58
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	89 83       	std	Y+1, r24	; 0x01
	DDRA_REG = portDirection;
 406:	ea e3       	ldi	r30, 0x3A	; 58
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	89 81       	ldd	r24, Y+1	; 0x01
 40c:	80 83       	st	Z, r24

	portDirection = DDRB_REG;
 40e:	e7 e3       	ldi	r30, 0x37	; 55
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	89 83       	std	Y+1, r24	; 0x01
	DDRB_REG = portDirection;
 416:	e7 e3       	ldi	r30, 0x37	; 55
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	80 83       	st	Z, r24

	portDirection = DDRC_REG;
 41e:	e4 e3       	ldi	r30, 0x34	; 52
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	89 83       	std	Y+1, r24	; 0x01
	DDRC_REG = portDirection;
 426:	e4 e3       	ldi	r30, 0x34	; 52
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	89 81       	ldd	r24, Y+1	; 0x01
 42c:	80 83       	st	Z, r24

	portDirection = DDRD_REG;
 42e:	e1 e3       	ldi	r30, 0x31	; 49
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	89 83       	std	Y+1, r24	; 0x01
	DDRD_REG = portDirection;
 436:	e1 e3       	ldi	r30, 0x31	; 49
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	89 81       	ldd	r24, Y+1	; 0x01
 43c:	80 83       	st	Z, r24
}
 43e:	0f 90       	pop	r0
 440:	cf 91       	pop	r28
 442:	df 91       	pop	r29
 444:	08 95       	ret

00000446 <Port_GetVersionInfo>:
	Parameters (inout): None
	Parameters (out): 	versioninfo Pointer to where to store the version information of this module.
	Return value: 		None
	Description: 		Returns the version information of this module.
 **********************************************************************************************************/
void Port_GetVersionInfo(Std_VersionInfoType* versioninfo){
 446:	df 93       	push	r29
 448:	cf 93       	push	r28
 44a:	00 d0       	rcall	.+0      	; 0x44c <Port_GetVersionInfo+0x6>
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
 450:	9a 83       	std	Y+2, r25	; 0x02
 452:	89 83       	std	Y+1, r24	; 0x01
		);
	}

#endif

	versioninfo->vendorID			=	PORT_VENDOR_ID;
 454:	e9 81       	ldd	r30, Y+1	; 0x01
 456:	fa 81       	ldd	r31, Y+2	; 0x02
 458:	88 ee       	ldi	r24, 0xE8	; 232
 45a:	93 e0       	ldi	r25, 0x03	; 3
 45c:	91 83       	std	Z+1, r25	; 0x01
 45e:	80 83       	st	Z, r24
	versioninfo->moduleID			=	PORT_MODULE_ID;
 460:	e9 81       	ldd	r30, Y+1	; 0x01
 462:	fa 81       	ldd	r31, Y+2	; 0x02
 464:	8c e7       	ldi	r24, 0x7C	; 124
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	93 83       	std	Z+3, r25	; 0x03
 46a:	82 83       	std	Z+2, r24	; 0x02
	versioninfo->sw_major_version	=	PORT_SW_RELEASE_MAJOR_VERSION;
 46c:	e9 81       	ldd	r30, Y+1	; 0x01
 46e:	fa 81       	ldd	r31, Y+2	; 0x02
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	84 83       	std	Z+4, r24	; 0x04
	versioninfo->sw_minor_version	=	PORT_SW_RELEASE_MINOR_VERSION;
 474:	e9 81       	ldd	r30, Y+1	; 0x01
 476:	fa 81       	ldd	r31, Y+2	; 0x02
 478:	15 82       	std	Z+5, r1	; 0x05
	versioninfo->sw_patch_version	=	PORT_SW_RELEASE_PATCH_VERSION;
 47a:	e9 81       	ldd	r30, Y+1	; 0x01
 47c:	fa 81       	ldd	r31, Y+2	; 0x02
 47e:	16 82       	std	Z+6, r1	; 0x06
}
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	cf 91       	pop	r28
 486:	df 91       	pop	r29
 488:	08 95       	ret

0000048a <Port_SetPinMode>:
	Parameters (inout): None
	Parameters (out): 	None
	Return value: 		None
	Description: 		Sets the port pin mode.
 **********************************************************************************************************/
void Port_SetPinMode(Port_PinType Pin, Port_PinModeType Mode){
 48a:	df 93       	push	r29
 48c:	cf 93       	push	r28
 48e:	00 d0       	rcall	.+0      	; 0x490 <Port_SetPinMode+0x6>
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
 494:	89 83       	std	Y+1, r24	; 0x01
 496:	6a 83       	std	Y+2, r22	; 0x02
	/*not applicable*/
}
 498:	0f 90       	pop	r0
 49a:	0f 90       	pop	r0
 49c:	cf 91       	pop	r28
 49e:	df 91       	pop	r29
 4a0:	08 95       	ret

000004a2 <Init_Task>:
#include "Port_Driver/static_code/Port.h"
#include "Micro_Config.h"

/* Task Called Once to initialize all the Modules */
void Init_Task(void)
{
 4a2:	df 93       	push	r29
 4a4:	cf 93       	push	r28
 4a6:	cd b7       	in	r28, 0x3d	; 61
 4a8:	de b7       	in	r29, 0x3e	; 62
	/* Enable Interrupts */
	SREG  |= (1<<7);
 4aa:	af e5       	ldi	r26, 0x5F	; 95
 4ac:	b0 e0       	ldi	r27, 0x00	; 0
 4ae:	ef e5       	ldi	r30, 0x5F	; 95
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	80 68       	ori	r24, 0x80	; 128
 4b6:	8c 93       	st	X, r24

	Dio_Init(&Dio_Configuration);
 4b8:	80 e4       	ldi	r24, 0x40	; 64
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Dio_Init>
	Port_Init(&Port_Configuration);
 4c0:	80 e6       	ldi	r24, 0x60	; 96
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 b3 00 	call	0x166	; 0x166 <Port_Init>
//	/* Initialize LED Driver */
//	LED_init();
//
//	/* Initialize BUTTON Driver */
//	BUTTON_init();
}
 4c8:	cf 91       	pop	r28
 4ca:	df 91       	pop	r29
 4cc:	08 95       	ret

000004ce <Button_Task>:

/* Task called every 20 Mili-seconds to check the button state */
void Button_Task(void)
{
 4ce:	df 93       	push	r29
 4d0:	cf 93       	push	r28
 4d2:	cd b7       	in	r28, 0x3d	; 61
 4d4:	de b7       	in	r29, 0x3e	; 62
	BUTTON_refreshState();
 4d6:	0e 94 9b 02 	call	0x536	; 0x536 <BUTTON_refreshState>
}
 4da:	cf 91       	pop	r28
 4dc:	df 91       	pop	r29
 4de:	08 95       	ret

000004e0 <Led_Task>:

/* Task called every 40 Mili-seconds to refresh the LED */
void Led_Task(void)
{
 4e0:	df 93       	push	r29
 4e2:	cf 93       	push	r28
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
	LED_refreshOutput();
 4e8:	0e 94 b3 05 	call	0xb66	; 0xb66 <LED_refreshOutput>
}
 4ec:	cf 91       	pop	r28
 4ee:	df 91       	pop	r29
 4f0:	08 95       	ret

000004f2 <App_Task>:

/* Task called every 60 Mili-seconds to get the button status and toggle the led */
void App_Task(void)
{
 4f2:	df 93       	push	r29
 4f4:	cf 93       	push	r28
 4f6:	cd b7       	in	r28, 0x3d	; 61
 4f8:	de b7       	in	r29, 0x3e	; 62
	static uint8 button_previous_state = BUTTON_RELEASED;
	static uint8 button_current_state  = BUTTON_RELEASED;
	
	button_current_state = BUTTON_getState(); //Read the button state
 4fa:	0e 94 92 02 	call	0x524	; 0x524 <BUTTON_getState>
 4fe:	80 93 47 01 	sts	0x0147, r24
	
	/* Only Toggle the led in case the current state of the switch is pressed
	 * and the previous state is released */ 
	if((button_current_state == BUTTON_PRESSED) && (button_previous_state == BUTTON_RELEASED))
 502:	80 91 47 01 	lds	r24, 0x0147
 506:	81 30       	cpi	r24, 0x01	; 1
 508:	31 f4       	brne	.+12     	; 0x516 <App_Task+0x24>
 50a:	80 91 48 01 	lds	r24, 0x0148
 50e:	88 23       	and	r24, r24
 510:	11 f4       	brne	.+4      	; 0x516 <App_Task+0x24>
	{
		LED_toggle();
 512:	0e 94 c4 05 	call	0xb88	; 0xb88 <LED_toggle>
	}
	
	button_previous_state = button_current_state;
 516:	80 91 47 01 	lds	r24, 0x0147
 51a:	80 93 48 01 	sts	0x0148, r24
}
 51e:	cf 91       	pop	r28
 520:	df 91       	pop	r29
 522:	08 95       	ret

00000524 <BUTTON_getState>:
//	BUTTON_configurations();
//	Port_SetDirection(&g_Button_Config);
//}
/*******************************************************************************************************************/
uint8 BUTTON_getState(void)
{
 524:	df 93       	push	r29
 526:	cf 93       	push	r28
 528:	cd b7       	in	r28, 0x3d	; 61
 52a:	de b7       	in	r29, 0x3e	; 62
	return g_button_state;
 52c:	80 91 4b 01 	lds	r24, 0x014B
}
 530:	cf 91       	pop	r28
 532:	df 91       	pop	r29
 534:	08 95       	ret

00000536 <BUTTON_refreshState>:
/*******************************************************************************************************************/
void BUTTON_refreshState(void)
{
 536:	df 93       	push	r29
 538:	cf 93       	push	r28
 53a:	0f 92       	push	r0
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
	uint8 state = Dio_ReadChannel(DioConf_BUTTON_CHANNEL_ID_INDEX);
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	0e 94 b7 03 	call	0x76e	; 0x76e <Dio_ReadChannel>
 546:	89 83       	std	Y+1, r24	; 0x01
	if(state == BUTTON_PRESSED)
 548:	89 81       	ldd	r24, Y+1	; 0x01
 54a:	81 30       	cpi	r24, 0x01	; 1
 54c:	41 f4       	brne	.+16     	; 0x55e <BUTTON_refreshState+0x28>
	{
		g_Pressed_Count++;
 54e:	80 91 49 01 	lds	r24, 0x0149
 552:	8f 5f       	subi	r24, 0xFF	; 255
 554:	80 93 49 01 	sts	0x0149, r24
		g_Released_Count = 0;
 558:	10 92 4a 01 	sts	0x014A, r1
 55c:	07 c0       	rjmp	.+14     	; 0x56c <BUTTON_refreshState+0x36>
	}
	else
	{
		g_Released_Count++;
 55e:	80 91 4a 01 	lds	r24, 0x014A
 562:	8f 5f       	subi	r24, 0xFF	; 255
 564:	80 93 4a 01 	sts	0x014A, r24
		g_Pressed_Count = 0;
 568:	10 92 49 01 	sts	0x0149, r1
	}

	if(g_Pressed_Count == 3)
 56c:	80 91 49 01 	lds	r24, 0x0149
 570:	83 30       	cpi	r24, 0x03	; 3
 572:	41 f4       	brne	.+16     	; 0x584 <BUTTON_refreshState+0x4e>
	{
		g_button_state = BUTTON_PRESSED;
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	80 93 4b 01 	sts	0x014B, r24
		g_Pressed_Count       = 0;
 57a:	10 92 49 01 	sts	0x0149, r1
		g_Released_Count      = 0;
 57e:	10 92 4a 01 	sts	0x014A, r1
 582:	0a c0       	rjmp	.+20     	; 0x598 <BUTTON_refreshState+0x62>
	}
	else if(g_Released_Count == 3)
 584:	80 91 4a 01 	lds	r24, 0x014A
 588:	83 30       	cpi	r24, 0x03	; 3
 58a:	31 f4       	brne	.+12     	; 0x598 <BUTTON_refreshState+0x62>
	{
		g_button_state = BUTTON_RELEASED;
 58c:	10 92 4b 01 	sts	0x014B, r1
		g_Released_Count      = 0;
 590:	10 92 4a 01 	sts	0x014A, r1
		g_Pressed_Count       = 0;
 594:	10 92 49 01 	sts	0x0149, r1
	}
}
 598:	0f 90       	pop	r0
 59a:	cf 91       	pop	r28
 59c:	df 91       	pop	r29
 59e:	08 95       	ret

000005a0 <Det_ReportError>:

void Det_ReportError( uint16 ModuleId,
                      uint8 InstanceId,
                      uint8 ApiId,
					  uint8 ErrorId )
{
 5a0:	df 93       	push	r29
 5a2:	cf 93       	push	r28
 5a4:	00 d0       	rcall	.+0      	; 0x5a6 <Det_ReportError+0x6>
 5a6:	00 d0       	rcall	.+0      	; 0x5a8 <Det_ReportError+0x8>
 5a8:	0f 92       	push	r0
 5aa:	cd b7       	in	r28, 0x3d	; 61
 5ac:	de b7       	in	r29, 0x3e	; 62
 5ae:	9a 83       	std	Y+2, r25	; 0x02
 5b0:	89 83       	std	Y+1, r24	; 0x01
 5b2:	6b 83       	std	Y+3, r22	; 0x03
 5b4:	4c 83       	std	Y+4, r20	; 0x04
 5b6:	2d 83       	std	Y+5, r18	; 0x05
 5b8:	ff cf       	rjmp	.-2      	; 0x5b8 <Det_ReportError+0x18>

000005ba <Dio_Init>:
* Parameters (out): None
* Return value: None
* Description: Function to Initialize the Dio module.
************************************************************************************/
void Dio_Init(const Dio_ConfigType * ConfigPtr)
{
 5ba:	df 93       	push	r29
 5bc:	cf 93       	push	r28
 5be:	00 d0       	rcall	.+0      	; 0x5c0 <Dio_Init+0x6>
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
 5c4:	9a 83       	std	Y+2, r25	; 0x02
 5c6:	89 83       	std	Y+1, r24	; 0x01
#if (DIO_DEV_ERROR_DETECT == STD_ON)
	/* check if the input configuration pointer is not a NULL_PTR */
	if (NULL_PTR == ConfigPtr)
 5c8:	89 81       	ldd	r24, Y+1	; 0x01
 5ca:	9a 81       	ldd	r25, Y+2	; 0x02
 5cc:	00 97       	sbiw	r24, 0x00	; 0
 5ce:	41 f4       	brne	.+16     	; 0x5e0 <Dio_Init+0x26>
	{
		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_INIT_SID,
 5d0:	88 e7       	ldi	r24, 0x78	; 120
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	40 e1       	ldi	r20, 0x10	; 16
 5d8:	20 e1       	ldi	r18, 0x10	; 16
 5da:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Det_ReportError>
 5de:	09 c0       	rjmp	.+18     	; 0x5f2 <Dio_Init+0x38>
	{
		/*
		 * Set the module state to initialized and point to the PB configuration structure using a global pointer.
		 * This global pointer is global to be used by other functions to read the PB configuration structures
		 */
		Dio_Status       = DIO_INITIALIZED;
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	80 93 4e 01 	sts	0x014E, r24
		Dio_PortChannels = ConfigPtr->Channels; /* address of the first Channels structure --> Channels[0] */
 5e6:	89 81       	ldd	r24, Y+1	; 0x01
 5e8:	9a 81       	ldd	r25, Y+2	; 0x02
 5ea:	90 93 4d 01 	sts	0x014D, r25
 5ee:	80 93 4c 01 	sts	0x014C, r24
	}
}
 5f2:	0f 90       	pop	r0
 5f4:	0f 90       	pop	r0
 5f6:	cf 91       	pop	r28
 5f8:	df 91       	pop	r29
 5fa:	08 95       	ret

000005fc <Dio_WriteChannel>:
* Parameters (out): None
* Return value: None
* Description: Function to set a level of a channel.
************************************************************************************/
void Dio_WriteChannel(Dio_ChannelType ChannelId, Dio_LevelType Level)
{
 5fc:	df 93       	push	r29
 5fe:	cf 93       	push	r28
 600:	cd b7       	in	r28, 0x3d	; 61
 602:	de b7       	in	r29, 0x3e	; 62
 604:	27 97       	sbiw	r28, 0x07	; 7
 606:	0f b6       	in	r0, 0x3f	; 63
 608:	f8 94       	cli
 60a:	de bf       	out	0x3e, r29	; 62
 60c:	0f be       	out	0x3f, r0	; 63
 60e:	cd bf       	out	0x3d, r28	; 61
 610:	8c 83       	std	Y+4, r24	; 0x04
 612:	6d 83       	std	Y+5, r22	; 0x05
	Dio_PortLevelType * Port_Ptr = NULL_PTR;
 614:	1b 82       	std	Y+3, r1	; 0x03
 616:	1a 82       	std	Y+2, r1	; 0x02
	boolean error = FALSE;
 618:	19 82       	std	Y+1, r1	; 0x01

#if (DIO_DEV_ERROR_DETECT == STD_ON)
	/* Check if the Driver is initialized before using this function */
	if (DIO_NOT_INITIALIZED == Dio_Status)
 61a:	80 91 4e 01 	lds	r24, 0x014E
 61e:	88 23       	and	r24, r24
 620:	49 f4       	brne	.+18     	; 0x634 <Dio_WriteChannel+0x38>
	{
		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 622:	88 e7       	ldi	r24, 0x78	; 120
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	41 e0       	ldi	r20, 0x01	; 1
 62a:	20 ef       	ldi	r18, 0xF0	; 240
 62c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Det_ReportError>
				DIO_WRITE_CHANNEL_SID, DIO_E_UNINIT);
		error = TRUE;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* No Action Required */
	}
	/* Check if the used channel is within the valid range */
	if (DIO_CONFIGURED_CHANNLES <= ChannelId)
 634:	8c 81       	ldd	r24, Y+4	; 0x04
 636:	82 30       	cpi	r24, 0x02	; 2
 638:	48 f0       	brcs	.+18     	; 0x64c <Dio_WriteChannel+0x50>
	{

		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 63a:	88 e7       	ldi	r24, 0x78	; 120
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	60 e0       	ldi	r22, 0x00	; 0
 640:	41 e0       	ldi	r20, 0x01	; 1
 642:	2a e0       	ldi	r18, 0x0A	; 10
 644:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Det_ReportError>
				DIO_WRITE_CHANNEL_SID, DIO_E_PARAM_INVALID_CHANNEL_ID);
		error = TRUE;
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	89 83       	std	Y+1, r24	; 0x01
		/* No Action Required */
	}
#endif

	/* In-case there are no errors */
	if(FALSE == error)
 64c:	89 81       	ldd	r24, Y+1	; 0x01
 64e:	88 23       	and	r24, r24
 650:	09 f0       	breq	.+2      	; 0x654 <Dio_WriteChannel+0x58>
 652:	84 c0       	rjmp	.+264    	; 0x75c <Dio_WriteChannel+0x160>
	{
		/* Point to the correct PORT register according to the Port Id stored in the Port_Num member */
		switch(Dio_PortChannels[ChannelId].Port_Num)
 654:	20 91 4c 01 	lds	r18, 0x014C
 658:	30 91 4d 01 	lds	r19, 0x014D
 65c:	8c 81       	ldd	r24, Y+4	; 0x04
 65e:	88 2f       	mov	r24, r24
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	f9 01       	movw	r30, r18
 668:	e8 0f       	add	r30, r24
 66a:	f9 1f       	adc	r31, r25
 66c:	80 81       	ld	r24, Z
 66e:	28 2f       	mov	r18, r24
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	3f 83       	std	Y+7, r19	; 0x07
 674:	2e 83       	std	Y+6, r18	; 0x06
 676:	8e 81       	ldd	r24, Y+6	; 0x06
 678:	9f 81       	ldd	r25, Y+7	; 0x07
 67a:	81 30       	cpi	r24, 0x01	; 1
 67c:	91 05       	cpc	r25, r1
 67e:	d1 f0       	breq	.+52     	; 0x6b4 <Dio_WriteChannel+0xb8>
 680:	2e 81       	ldd	r18, Y+6	; 0x06
 682:	3f 81       	ldd	r19, Y+7	; 0x07
 684:	22 30       	cpi	r18, 0x02	; 2
 686:	31 05       	cpc	r19, r1
 688:	2c f4       	brge	.+10     	; 0x694 <Dio_WriteChannel+0x98>
 68a:	8e 81       	ldd	r24, Y+6	; 0x06
 68c:	9f 81       	ldd	r25, Y+7	; 0x07
 68e:	00 97       	sbiw	r24, 0x00	; 0
 690:	61 f0       	breq	.+24     	; 0x6aa <Dio_WriteChannel+0xae>
 692:	1e c0       	rjmp	.+60     	; 0x6d0 <Dio_WriteChannel+0xd4>
 694:	2e 81       	ldd	r18, Y+6	; 0x06
 696:	3f 81       	ldd	r19, Y+7	; 0x07
 698:	22 30       	cpi	r18, 0x02	; 2
 69a:	31 05       	cpc	r19, r1
 69c:	81 f0       	breq	.+32     	; 0x6be <Dio_WriteChannel+0xc2>
 69e:	8e 81       	ldd	r24, Y+6	; 0x06
 6a0:	9f 81       	ldd	r25, Y+7	; 0x07
 6a2:	83 30       	cpi	r24, 0x03	; 3
 6a4:	91 05       	cpc	r25, r1
 6a6:	81 f0       	breq	.+32     	; 0x6c8 <Dio_WriteChannel+0xcc>
 6a8:	13 c0       	rjmp	.+38     	; 0x6d0 <Dio_WriteChannel+0xd4>
		{
			case 0:	Port_Ptr = &PORTA_REG;
 6aa:	8b e3       	ldi	r24, 0x3B	; 59
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	9b 83       	std	Y+3, r25	; 0x03
 6b0:	8a 83       	std	Y+2, r24	; 0x02
 6b2:	0e c0       	rjmp	.+28     	; 0x6d0 <Dio_WriteChannel+0xd4>
		        break;
			case 1:	Port_Ptr = &PORTB_REG;
 6b4:	88 e3       	ldi	r24, 0x38	; 56
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	9b 83       	std	Y+3, r25	; 0x03
 6ba:	8a 83       	std	Y+2, r24	; 0x02
 6bc:	09 c0       	rjmp	.+18     	; 0x6d0 <Dio_WriteChannel+0xd4>
		        break;
			case 2:	Port_Ptr = &PORTC_REG;
 6be:	85 e3       	ldi	r24, 0x35	; 53
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	9b 83       	std	Y+3, r25	; 0x03
 6c4:	8a 83       	std	Y+2, r24	; 0x02
 6c6:	04 c0       	rjmp	.+8      	; 0x6d0 <Dio_WriteChannel+0xd4>
		        break;
			case 3:	Port_Ptr = &PORTD_REG;
 6c8:	82 e3       	ldi	r24, 0x32	; 50
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	9b 83       	std	Y+3, r25	; 0x03
 6ce:	8a 83       	std	Y+2, r24	; 0x02
		        break;
		}
		if(Level == STD_HIGH)
 6d0:	8d 81       	ldd	r24, Y+5	; 0x05
 6d2:	81 30       	cpi	r24, 0x01	; 1
 6d4:	01 f5       	brne	.+64     	; 0x716 <Dio_WriteChannel+0x11a>
		{
			/* Write Logic High */
			SET_BIT(*Port_Ptr,Dio_PortChannels[ChannelId].Ch_Num);
 6d6:	ea 81       	ldd	r30, Y+2	; 0x02
 6d8:	fb 81       	ldd	r31, Y+3	; 0x03
 6da:	80 81       	ld	r24, Z
 6dc:	48 2f       	mov	r20, r24
 6de:	20 91 4c 01 	lds	r18, 0x014C
 6e2:	30 91 4d 01 	lds	r19, 0x014D
 6e6:	8c 81       	ldd	r24, Y+4	; 0x04
 6e8:	88 2f       	mov	r24, r24
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	f9 01       	movw	r30, r18
 6f2:	e8 0f       	add	r30, r24
 6f4:	f9 1f       	adc	r31, r25
 6f6:	81 81       	ldd	r24, Z+1	; 0x01
 6f8:	28 2f       	mov	r18, r24
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	02 2e       	mov	r0, r18
 702:	02 c0       	rjmp	.+4      	; 0x708 <Dio_WriteChannel+0x10c>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	0a 94       	dec	r0
 70a:	e2 f7       	brpl	.-8      	; 0x704 <Dio_WriteChannel+0x108>
 70c:	84 2b       	or	r24, r20
 70e:	ea 81       	ldd	r30, Y+2	; 0x02
 710:	fb 81       	ldd	r31, Y+3	; 0x03
 712:	80 83       	st	Z, r24
 714:	23 c0       	rjmp	.+70     	; 0x75c <Dio_WriteChannel+0x160>
		}
		else if(Level == STD_LOW)
 716:	8d 81       	ldd	r24, Y+5	; 0x05
 718:	88 23       	and	r24, r24
 71a:	01 f5       	brne	.+64     	; 0x75c <Dio_WriteChannel+0x160>
		{
			/* Write Logic Low */
			CLEAR_BIT(*Port_Ptr,Dio_PortChannels[ChannelId].Ch_Num);
 71c:	ea 81       	ldd	r30, Y+2	; 0x02
 71e:	fb 81       	ldd	r31, Y+3	; 0x03
 720:	80 81       	ld	r24, Z
 722:	48 2f       	mov	r20, r24
 724:	20 91 4c 01 	lds	r18, 0x014C
 728:	30 91 4d 01 	lds	r19, 0x014D
 72c:	8c 81       	ldd	r24, Y+4	; 0x04
 72e:	88 2f       	mov	r24, r24
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	88 0f       	add	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	f9 01       	movw	r30, r18
 738:	e8 0f       	add	r30, r24
 73a:	f9 1f       	adc	r31, r25
 73c:	81 81       	ldd	r24, Z+1	; 0x01
 73e:	28 2f       	mov	r18, r24
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	02 2e       	mov	r0, r18
 748:	02 c0       	rjmp	.+4      	; 0x74e <Dio_WriteChannel+0x152>
 74a:	88 0f       	add	r24, r24
 74c:	99 1f       	adc	r25, r25
 74e:	0a 94       	dec	r0
 750:	e2 f7       	brpl	.-8      	; 0x74a <Dio_WriteChannel+0x14e>
 752:	80 95       	com	r24
 754:	84 23       	and	r24, r20
 756:	ea 81       	ldd	r30, Y+2	; 0x02
 758:	fb 81       	ldd	r31, Y+3	; 0x03
 75a:	80 83       	st	Z, r24
	else
	{
		/* No Action Required */
	}

}
 75c:	27 96       	adiw	r28, 0x07	; 7
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	f8 94       	cli
 762:	de bf       	out	0x3e, r29	; 62
 764:	0f be       	out	0x3f, r0	; 63
 766:	cd bf       	out	0x3d, r28	; 61
 768:	cf 91       	pop	r28
 76a:	df 91       	pop	r29
 76c:	08 95       	ret

0000076e <Dio_ReadChannel>:
* Parameters (out): None
* Return value: Dio_LevelType
* Description: Function to return the value of the specified DIO channel.
************************************************************************************/
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId)
{
 76e:	df 93       	push	r29
 770:	cf 93       	push	r28
 772:	cd b7       	in	r28, 0x3d	; 61
 774:	de b7       	in	r29, 0x3e	; 62
 776:	28 97       	sbiw	r28, 0x08	; 8
 778:	0f b6       	in	r0, 0x3f	; 63
 77a:	f8 94       	cli
 77c:	de bf       	out	0x3e, r29	; 62
 77e:	0f be       	out	0x3f, r0	; 63
 780:	cd bf       	out	0x3d, r28	; 61
 782:	8d 83       	std	Y+5, r24	; 0x05
	Dio_PortLevelType * PIN_Ptr = NULL_PTR;
 784:	1c 82       	std	Y+4, r1	; 0x04
 786:	1b 82       	std	Y+3, r1	; 0x03
	Dio_LevelType output = STD_LOW;
 788:	1a 82       	std	Y+2, r1	; 0x02
	boolean error = FALSE;
 78a:	19 82       	std	Y+1, r1	; 0x01

#if (DIO_DEV_ERROR_DETECT == STD_ON)
	/* Check if the Driver is initialized before using this function */
	if (DIO_NOT_INITIALIZED == Dio_Status)
 78c:	80 91 4e 01 	lds	r24, 0x014E
 790:	88 23       	and	r24, r24
 792:	49 f4       	brne	.+18     	; 0x7a6 <Dio_ReadChannel+0x38>
	{
		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 794:	88 e7       	ldi	r24, 0x78	; 120
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	40 e0       	ldi	r20, 0x00	; 0
 79c:	20 ef       	ldi	r18, 0xF0	; 240
 79e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Det_ReportError>
				DIO_READ_CHANNEL_SID, DIO_E_UNINIT);
		error = TRUE;
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* No Action Required */
	}
	/* Check if the used channel is within the valid range */
	if (DIO_CONFIGURED_CHANNLES <= ChannelId)
 7a6:	8d 81       	ldd	r24, Y+5	; 0x05
 7a8:	82 30       	cpi	r24, 0x02	; 2
 7aa:	48 f0       	brcs	.+18     	; 0x7be <Dio_ReadChannel+0x50>
	{

		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 7ac:	88 e7       	ldi	r24, 0x78	; 120
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	40 e0       	ldi	r20, 0x00	; 0
 7b4:	2a e0       	ldi	r18, 0x0A	; 10
 7b6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Det_ReportError>
				DIO_READ_CHANNEL_SID, DIO_E_PARAM_INVALID_CHANNEL_ID);
		error = TRUE;
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	89 83       	std	Y+1, r24	; 0x01
		/* No Action Required */
	}
#endif

	/* In-case there are no errors */
	if(FALSE == error)
 7be:	89 81       	ldd	r24, Y+1	; 0x01
 7c0:	88 23       	and	r24, r24
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <Dio_ReadChannel+0x58>
 7c4:	65 c0       	rjmp	.+202    	; 0x890 <Dio_ReadChannel+0x122>
	{
		/* Point to the correct PIN register according to the Port Id stored in the Port_Num member */
		switch(Dio_PortChannels[ChannelId].Port_Num)
 7c6:	20 91 4c 01 	lds	r18, 0x014C
 7ca:	30 91 4d 01 	lds	r19, 0x014D
 7ce:	8d 81       	ldd	r24, Y+5	; 0x05
 7d0:	88 2f       	mov	r24, r24
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	88 0f       	add	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	f9 01       	movw	r30, r18
 7da:	e8 0f       	add	r30, r24
 7dc:	f9 1f       	adc	r31, r25
 7de:	80 81       	ld	r24, Z
 7e0:	28 2f       	mov	r18, r24
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	3f 83       	std	Y+7, r19	; 0x07
 7e6:	2e 83       	std	Y+6, r18	; 0x06
 7e8:	8e 81       	ldd	r24, Y+6	; 0x06
 7ea:	9f 81       	ldd	r25, Y+7	; 0x07
 7ec:	81 30       	cpi	r24, 0x01	; 1
 7ee:	91 05       	cpc	r25, r1
 7f0:	d1 f0       	breq	.+52     	; 0x826 <Dio_ReadChannel+0xb8>
 7f2:	2e 81       	ldd	r18, Y+6	; 0x06
 7f4:	3f 81       	ldd	r19, Y+7	; 0x07
 7f6:	22 30       	cpi	r18, 0x02	; 2
 7f8:	31 05       	cpc	r19, r1
 7fa:	2c f4       	brge	.+10     	; 0x806 <Dio_ReadChannel+0x98>
 7fc:	8e 81       	ldd	r24, Y+6	; 0x06
 7fe:	9f 81       	ldd	r25, Y+7	; 0x07
 800:	00 97       	sbiw	r24, 0x00	; 0
 802:	61 f0       	breq	.+24     	; 0x81c <Dio_ReadChannel+0xae>
 804:	1e c0       	rjmp	.+60     	; 0x842 <Dio_ReadChannel+0xd4>
 806:	2e 81       	ldd	r18, Y+6	; 0x06
 808:	3f 81       	ldd	r19, Y+7	; 0x07
 80a:	22 30       	cpi	r18, 0x02	; 2
 80c:	31 05       	cpc	r19, r1
 80e:	81 f0       	breq	.+32     	; 0x830 <Dio_ReadChannel+0xc2>
 810:	8e 81       	ldd	r24, Y+6	; 0x06
 812:	9f 81       	ldd	r25, Y+7	; 0x07
 814:	83 30       	cpi	r24, 0x03	; 3
 816:	91 05       	cpc	r25, r1
 818:	81 f0       	breq	.+32     	; 0x83a <Dio_ReadChannel+0xcc>
 81a:	13 c0       	rjmp	.+38     	; 0x842 <Dio_ReadChannel+0xd4>
		{
		case 0:	PIN_Ptr = &PINA_REG;
 81c:	89 e3       	ldi	r24, 0x39	; 57
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	9c 83       	std	Y+4, r25	; 0x04
 822:	8b 83       	std	Y+3, r24	; 0x03
 824:	0e c0       	rjmp	.+28     	; 0x842 <Dio_ReadChannel+0xd4>
		break;
		case 1:	PIN_Ptr = &PINB_REG;
 826:	86 e3       	ldi	r24, 0x36	; 54
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	9c 83       	std	Y+4, r25	; 0x04
 82c:	8b 83       	std	Y+3, r24	; 0x03
 82e:	09 c0       	rjmp	.+18     	; 0x842 <Dio_ReadChannel+0xd4>
		break;
		case 2:	PIN_Ptr = &PINC_REG;
 830:	83 e3       	ldi	r24, 0x33	; 51
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	9c 83       	std	Y+4, r25	; 0x04
 836:	8b 83       	std	Y+3, r24	; 0x03
 838:	04 c0       	rjmp	.+8      	; 0x842 <Dio_ReadChannel+0xd4>
		break;
		case 3:	PIN_Ptr = &PIND_REG;
 83a:	80 e3       	ldi	r24, 0x30	; 48
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	9c 83       	std	Y+4, r25	; 0x04
 840:	8b 83       	std	Y+3, r24	; 0x03
		break;
		}
		/* Read the required channel */
		if(BIT_IS_SET(*PIN_Ptr,Dio_PortChannels[ChannelId].Ch_Num))
 842:	eb 81       	ldd	r30, Y+3	; 0x03
 844:	fc 81       	ldd	r31, Y+4	; 0x04
 846:	80 81       	ld	r24, Z
 848:	48 2f       	mov	r20, r24
 84a:	50 e0       	ldi	r21, 0x00	; 0
 84c:	20 91 4c 01 	lds	r18, 0x014C
 850:	30 91 4d 01 	lds	r19, 0x014D
 854:	8d 81       	ldd	r24, Y+5	; 0x05
 856:	88 2f       	mov	r24, r24
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	88 0f       	add	r24, r24
 85c:	99 1f       	adc	r25, r25
 85e:	f9 01       	movw	r30, r18
 860:	e8 0f       	add	r30, r24
 862:	f9 1f       	adc	r31, r25
 864:	81 81       	ldd	r24, Z+1	; 0x01
 866:	88 2f       	mov	r24, r24
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	9a 01       	movw	r18, r20
 86c:	02 c0       	rjmp	.+4      	; 0x872 <Dio_ReadChannel+0x104>
 86e:	35 95       	asr	r19
 870:	27 95       	ror	r18
 872:	8a 95       	dec	r24
 874:	e2 f7       	brpl	.-8      	; 0x86e <Dio_ReadChannel+0x100>
 876:	c9 01       	movw	r24, r18
 878:	81 70       	andi	r24, 0x01	; 1
 87a:	90 70       	andi	r25, 0x00	; 0
 87c:	88 23       	and	r24, r24
 87e:	19 f0       	breq	.+6      	; 0x886 <Dio_ReadChannel+0x118>
		{
			output = STD_HIGH;
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	8a 83       	std	Y+2, r24	; 0x02
 884:	01 c0       	rjmp	.+2      	; 0x888 <Dio_ReadChannel+0x11a>
		}
		else
		{
			output = STD_LOW;
 886:	1a 82       	std	Y+2, r1	; 0x02
		}
		return output;
 888:	8a 81       	ldd	r24, Y+2	; 0x02
 88a:	88 87       	std	Y+8, r24	; 0x08
	}
	else
	{
		/* No Action Required */
	}
}
 88c:	88 85       	ldd	r24, Y+8	; 0x08
 88e:	00 c0       	rjmp	.+0      	; 0x890 <Dio_ReadChannel+0x122>
 890:	28 96       	adiw	r28, 0x08	; 8
 892:	0f b6       	in	r0, 0x3f	; 63
 894:	f8 94       	cli
 896:	de bf       	out	0x3e, r29	; 62
 898:	0f be       	out	0x3f, r0	; 63
 89a:	cd bf       	out	0x3d, r28	; 61
 89c:	cf 91       	pop	r28
 89e:	df 91       	pop	r29
 8a0:	08 95       	ret

000008a2 <Dio_FlipChannel>:
* Return value: Dio_LevelType
* Description: Function to flip the level of a channel and return the level of the channel after flip.
************************************************************************************/
#if (DIO_FLIP_CHANNEL_API == STD_ON)
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId)
{
 8a2:	df 93       	push	r29
 8a4:	cf 93       	push	r28
 8a6:	cd b7       	in	r28, 0x3d	; 61
 8a8:	de b7       	in	r29, 0x3e	; 62
 8aa:	2a 97       	sbiw	r28, 0x0a	; 10
 8ac:	0f b6       	in	r0, 0x3f	; 63
 8ae:	f8 94       	cli
 8b0:	de bf       	out	0x3e, r29	; 62
 8b2:	0f be       	out	0x3f, r0	; 63
 8b4:	cd bf       	out	0x3d, r28	; 61
 8b6:	8f 83       	std	Y+7, r24	; 0x07
	Dio_PortLevelType * Port_Ptr = NULL_PTR;
 8b8:	1e 82       	std	Y+6, r1	; 0x06
 8ba:	1d 82       	std	Y+5, r1	; 0x05
	Dio_PortLevelType * PIN_Ptr = NULL_PTR;
 8bc:	1c 82       	std	Y+4, r1	; 0x04
 8be:	1b 82       	std	Y+3, r1	; 0x03
	Dio_LevelType output = STD_LOW;
 8c0:	1a 82       	std	Y+2, r1	; 0x02
	boolean error = FALSE;
 8c2:	19 82       	std	Y+1, r1	; 0x01

#if (DIO_DEV_ERROR_DETECT == STD_ON)
	/* Check if the Driver is initialized before using this function */
	if (DIO_NOT_INITIALIZED == Dio_Status)
 8c4:	80 91 4e 01 	lds	r24, 0x014E
 8c8:	88 23       	and	r24, r24
 8ca:	49 f4       	brne	.+18     	; 0x8de <Dio_FlipChannel+0x3c>
	{
		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 8cc:	88 e7       	ldi	r24, 0x78	; 120
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	60 e0       	ldi	r22, 0x00	; 0
 8d2:	41 e1       	ldi	r20, 0x11	; 17
 8d4:	20 ef       	ldi	r18, 0xF0	; 240
 8d6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Det_ReportError>
				DIO_FLIP_CHANNEL_SID, DIO_E_UNINIT);
		error = TRUE;
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* No Action Required */
	}
	/* Check if the used channel is within the valid range */
	if (DIO_CONFIGURED_CHANNLES <= ChannelId)
 8de:	8f 81       	ldd	r24, Y+7	; 0x07
 8e0:	82 30       	cpi	r24, 0x02	; 2
 8e2:	48 f0       	brcs	.+18     	; 0x8f6 <Dio_FlipChannel+0x54>
	{

		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 8e4:	88 e7       	ldi	r24, 0x78	; 120
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	60 e0       	ldi	r22, 0x00	; 0
 8ea:	41 e1       	ldi	r20, 0x11	; 17
 8ec:	2a e0       	ldi	r18, 0x0A	; 10
 8ee:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Det_ReportError>
				DIO_FLIP_CHANNEL_SID, DIO_E_PARAM_INVALID_CHANNEL_ID);
		error = TRUE;
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	89 83       	std	Y+1, r24	; 0x01
		/* No Action Required */
	}
#endif

	/* In-case there are no errors */
	if(FALSE == error)
 8f6:	89 81       	ldd	r24, Y+1	; 0x01
 8f8:	88 23       	and	r24, r24
 8fa:	09 f0       	breq	.+2      	; 0x8fe <Dio_FlipChannel+0x5c>
 8fc:	b4 c0       	rjmp	.+360    	; 0xa66 <Dio_FlipChannel+0x1c4>
	{
		/* Point to the correct PIN & PORT register according to the Port Id stored in the Port_Num member */
		switch(Dio_PortChannels[ChannelId].Port_Num)
 8fe:	20 91 4c 01 	lds	r18, 0x014C
 902:	30 91 4d 01 	lds	r19, 0x014D
 906:	8f 81       	ldd	r24, Y+7	; 0x07
 908:	88 2f       	mov	r24, r24
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	88 0f       	add	r24, r24
 90e:	99 1f       	adc	r25, r25
 910:	f9 01       	movw	r30, r18
 912:	e8 0f       	add	r30, r24
 914:	f9 1f       	adc	r31, r25
 916:	80 81       	ld	r24, Z
 918:	28 2f       	mov	r18, r24
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	39 87       	std	Y+9, r19	; 0x09
 91e:	28 87       	std	Y+8, r18	; 0x08
 920:	88 85       	ldd	r24, Y+8	; 0x08
 922:	99 85       	ldd	r25, Y+9	; 0x09
 924:	81 30       	cpi	r24, 0x01	; 1
 926:	91 05       	cpc	r25, r1
 928:	f1 f0       	breq	.+60     	; 0x966 <Dio_FlipChannel+0xc4>
 92a:	28 85       	ldd	r18, Y+8	; 0x08
 92c:	39 85       	ldd	r19, Y+9	; 0x09
 92e:	22 30       	cpi	r18, 0x02	; 2
 930:	31 05       	cpc	r19, r1
 932:	2c f4       	brge	.+10     	; 0x93e <Dio_FlipChannel+0x9c>
 934:	88 85       	ldd	r24, Y+8	; 0x08
 936:	99 85       	ldd	r25, Y+9	; 0x09
 938:	00 97       	sbiw	r24, 0x00	; 0
 93a:	61 f0       	breq	.+24     	; 0x954 <Dio_FlipChannel+0xb2>
 93c:	2e c0       	rjmp	.+92     	; 0x99a <Dio_FlipChannel+0xf8>
 93e:	28 85       	ldd	r18, Y+8	; 0x08
 940:	39 85       	ldd	r19, Y+9	; 0x09
 942:	22 30       	cpi	r18, 0x02	; 2
 944:	31 05       	cpc	r19, r1
 946:	c1 f0       	breq	.+48     	; 0x978 <Dio_FlipChannel+0xd6>
 948:	88 85       	ldd	r24, Y+8	; 0x08
 94a:	99 85       	ldd	r25, Y+9	; 0x09
 94c:	83 30       	cpi	r24, 0x03	; 3
 94e:	91 05       	cpc	r25, r1
 950:	e1 f0       	breq	.+56     	; 0x98a <Dio_FlipChannel+0xe8>
 952:	23 c0       	rjmp	.+70     	; 0x99a <Dio_FlipChannel+0xf8>
		{
		case 0:	Port_Ptr = &PORTA_REG;
 954:	8b e3       	ldi	r24, 0x3B	; 59
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	9e 83       	std	Y+6, r25	; 0x06
 95a:	8d 83       	std	Y+5, r24	; 0x05
		        PIN_Ptr  = &PINA_REG;
 95c:	89 e3       	ldi	r24, 0x39	; 57
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	9c 83       	std	Y+4, r25	; 0x04
 962:	8b 83       	std	Y+3, r24	; 0x03
 964:	1a c0       	rjmp	.+52     	; 0x99a <Dio_FlipChannel+0xf8>
		break;
		case 1:	Port_Ptr = &PORTB_REG;
 966:	88 e3       	ldi	r24, 0x38	; 56
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	9e 83       	std	Y+6, r25	; 0x06
 96c:	8d 83       	std	Y+5, r24	; 0x05
		        PIN_Ptr  = &PINB_REG;
 96e:	86 e3       	ldi	r24, 0x36	; 54
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	9c 83       	std	Y+4, r25	; 0x04
 974:	8b 83       	std	Y+3, r24	; 0x03
 976:	11 c0       	rjmp	.+34     	; 0x99a <Dio_FlipChannel+0xf8>
		break;
		case 2:	Port_Ptr = &PORTC_REG;
 978:	85 e3       	ldi	r24, 0x35	; 53
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	9e 83       	std	Y+6, r25	; 0x06
 97e:	8d 83       	std	Y+5, r24	; 0x05
		        PIN_Ptr  = &PINC_REG;
 980:	83 e3       	ldi	r24, 0x33	; 51
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	9c 83       	std	Y+4, r25	; 0x04
 986:	8b 83       	std	Y+3, r24	; 0x03
 988:	08 c0       	rjmp	.+16     	; 0x99a <Dio_FlipChannel+0xf8>
		break;
		case 3:	Port_Ptr = &PORTD_REG;
 98a:	82 e3       	ldi	r24, 0x32	; 50
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	9e 83       	std	Y+6, r25	; 0x06
 990:	8d 83       	std	Y+5, r24	; 0x05
		        PIN_Ptr  = &PIND_REG;
 992:	80 e3       	ldi	r24, 0x30	; 48
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	9c 83       	std	Y+4, r25	; 0x04
 998:	8b 83       	std	Y+3, r24	; 0x03
		break;
		}
		/* Read the required channel and write the required level */
		if(BIT_IS_SET(*PIN_Ptr,Dio_PortChannels[ChannelId].Ch_Num))
 99a:	eb 81       	ldd	r30, Y+3	; 0x03
 99c:	fc 81       	ldd	r31, Y+4	; 0x04
 99e:	80 81       	ld	r24, Z
 9a0:	48 2f       	mov	r20, r24
 9a2:	50 e0       	ldi	r21, 0x00	; 0
 9a4:	20 91 4c 01 	lds	r18, 0x014C
 9a8:	30 91 4d 01 	lds	r19, 0x014D
 9ac:	8f 81       	ldd	r24, Y+7	; 0x07
 9ae:	88 2f       	mov	r24, r24
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	88 0f       	add	r24, r24
 9b4:	99 1f       	adc	r25, r25
 9b6:	f9 01       	movw	r30, r18
 9b8:	e8 0f       	add	r30, r24
 9ba:	f9 1f       	adc	r31, r25
 9bc:	81 81       	ldd	r24, Z+1	; 0x01
 9be:	88 2f       	mov	r24, r24
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	9a 01       	movw	r18, r20
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <Dio_FlipChannel+0x128>
 9c6:	35 95       	asr	r19
 9c8:	27 95       	ror	r18
 9ca:	8a 95       	dec	r24
 9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <Dio_FlipChannel+0x124>
 9ce:	c9 01       	movw	r24, r18
 9d0:	81 70       	andi	r24, 0x01	; 1
 9d2:	90 70       	andi	r25, 0x00	; 0
 9d4:	88 23       	and	r24, r24
 9d6:	11 f1       	breq	.+68     	; 0xa1c <Dio_FlipChannel+0x17a>
		{
			CLEAR_BIT(*Port_Ptr,Dio_PortChannels[ChannelId].Ch_Num);
 9d8:	ed 81       	ldd	r30, Y+5	; 0x05
 9da:	fe 81       	ldd	r31, Y+6	; 0x06
 9dc:	80 81       	ld	r24, Z
 9de:	48 2f       	mov	r20, r24
 9e0:	20 91 4c 01 	lds	r18, 0x014C
 9e4:	30 91 4d 01 	lds	r19, 0x014D
 9e8:	8f 81       	ldd	r24, Y+7	; 0x07
 9ea:	88 2f       	mov	r24, r24
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	88 0f       	add	r24, r24
 9f0:	99 1f       	adc	r25, r25
 9f2:	f9 01       	movw	r30, r18
 9f4:	e8 0f       	add	r30, r24
 9f6:	f9 1f       	adc	r31, r25
 9f8:	81 81       	ldd	r24, Z+1	; 0x01
 9fa:	28 2f       	mov	r18, r24
 9fc:	30 e0       	ldi	r19, 0x00	; 0
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	02 2e       	mov	r0, r18
 a04:	02 c0       	rjmp	.+4      	; 0xa0a <Dio_FlipChannel+0x168>
 a06:	88 0f       	add	r24, r24
 a08:	99 1f       	adc	r25, r25
 a0a:	0a 94       	dec	r0
 a0c:	e2 f7       	brpl	.-8      	; 0xa06 <Dio_FlipChannel+0x164>
 a0e:	80 95       	com	r24
 a10:	84 23       	and	r24, r20
 a12:	ed 81       	ldd	r30, Y+5	; 0x05
 a14:	fe 81       	ldd	r31, Y+6	; 0x06
 a16:	80 83       	st	Z, r24
			output = STD_LOW;
 a18:	1a 82       	std	Y+2, r1	; 0x02
 a1a:	21 c0       	rjmp	.+66     	; 0xa5e <Dio_FlipChannel+0x1bc>
		}
		else
		{
			SET_BIT(*Port_Ptr,Dio_PortChannels[ChannelId].Ch_Num);
 a1c:	ed 81       	ldd	r30, Y+5	; 0x05
 a1e:	fe 81       	ldd	r31, Y+6	; 0x06
 a20:	80 81       	ld	r24, Z
 a22:	48 2f       	mov	r20, r24
 a24:	20 91 4c 01 	lds	r18, 0x014C
 a28:	30 91 4d 01 	lds	r19, 0x014D
 a2c:	8f 81       	ldd	r24, Y+7	; 0x07
 a2e:	88 2f       	mov	r24, r24
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	88 0f       	add	r24, r24
 a34:	99 1f       	adc	r25, r25
 a36:	f9 01       	movw	r30, r18
 a38:	e8 0f       	add	r30, r24
 a3a:	f9 1f       	adc	r31, r25
 a3c:	81 81       	ldd	r24, Z+1	; 0x01
 a3e:	28 2f       	mov	r18, r24
 a40:	30 e0       	ldi	r19, 0x00	; 0
 a42:	81 e0       	ldi	r24, 0x01	; 1
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	02 2e       	mov	r0, r18
 a48:	02 c0       	rjmp	.+4      	; 0xa4e <Dio_FlipChannel+0x1ac>
 a4a:	88 0f       	add	r24, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	0a 94       	dec	r0
 a50:	e2 f7       	brpl	.-8      	; 0xa4a <Dio_FlipChannel+0x1a8>
 a52:	84 2b       	or	r24, r20
 a54:	ed 81       	ldd	r30, Y+5	; 0x05
 a56:	fe 81       	ldd	r31, Y+6	; 0x06
 a58:	80 83       	st	Z, r24
			output = STD_HIGH;
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	8a 83       	std	Y+2, r24	; 0x02
		}
		return output;
 a5e:	8a 81       	ldd	r24, Y+2	; 0x02
 a60:	8a 87       	std	Y+10, r24	; 0x0a
	}
	else
	{
		/* No Action Required */
	}
}
 a62:	8a 85       	ldd	r24, Y+10	; 0x0a
 a64:	00 c0       	rjmp	.+0      	; 0xa66 <Dio_FlipChannel+0x1c4>
 a66:	2a 96       	adiw	r28, 0x0a	; 10
 a68:	0f b6       	in	r0, 0x3f	; 63
 a6a:	f8 94       	cli
 a6c:	de bf       	out	0x3e, r29	; 62
 a6e:	0f be       	out	0x3f, r0	; 63
 a70:	cd bf       	out	0x3d, r28	; 61
 a72:	cf 91       	pop	r28
 a74:	df 91       	pop	r29
 a76:	08 95       	ret

00000a78 <Timer0_start>:
 * to be used in Call Back */
static volatile void (*g_Timer0_Call_Back_Ptr)(void) = NULL_PTR;

/*********************************************************************************************/ 
void Timer0_start(uint8 Tick_Time)
{
 a78:	df 93       	push	r29
 a7a:	cf 93       	push	r28
 a7c:	0f 92       	push	r0
 a7e:	cd b7       	in	r28, 0x3d	; 61
 a80:	de b7       	in	r29, 0x3e	; 62
 a82:	89 83       	std	Y+1, r24	; 0x01
	TCNT0  = 0; /* Timer0 initial value */
 a84:	e2 e5       	ldi	r30, 0x52	; 82
 a86:	f0 e0       	ldi	r31, 0x00	; 0
 a88:	10 82       	st	Z, r1
	OCR0   = Tick_Time; /* Set Compare Register Value */
 a8a:	ec e5       	ldi	r30, 0x5C	; 92
 a8c:	f0 e0       	ldi	r31, 0x00	; 0
 a8e:	89 81       	ldd	r24, Y+1	; 0x01
 a90:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE0); /* Enable Compare Interrupt for Timer0 */
 a92:	a9 e5       	ldi	r26, 0x59	; 89
 a94:	b0 e0       	ldi	r27, 0x00	; 0
 a96:	e9 e5       	ldi	r30, 0x59	; 89
 a98:	f0 e0       	ldi	r31, 0x00	; 0
 a9a:	80 81       	ld	r24, Z
 a9c:	82 60       	ori	r24, 0x02	; 2
 a9e:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 so COM00=0 & COM01=0  
	 * 4. start Timer0 by initiating clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0  = (1<<FOC0) | (1<<WGM01) | (1<<CS02) | (1<<CS00);
 aa0:	e3 e5       	ldi	r30, 0x53	; 83
 aa2:	f0 e0       	ldi	r31, 0x00	; 0
 aa4:	8d e8       	ldi	r24, 0x8D	; 141
 aa6:	80 83       	st	Z, r24
}
 aa8:	0f 90       	pop	r0
 aaa:	cf 91       	pop	r28
 aac:	df 91       	pop	r29
 aae:	08 95       	ret

00000ab0 <Timer0_setCallBack>:
/*********************************************************************************************/
void Timer0_setCallBack(void(*Ptr2Func)(void))
{
 ab0:	df 93       	push	r29
 ab2:	cf 93       	push	r28
 ab4:	00 d0       	rcall	.+0      	; 0xab6 <Timer0_setCallBack+0x6>
 ab6:	cd b7       	in	r28, 0x3d	; 61
 ab8:	de b7       	in	r29, 0x3e	; 62
 aba:	9a 83       	std	Y+2, r25	; 0x02
 abc:	89 83       	std	Y+1, r24	; 0x01
	g_Timer0_Call_Back_Ptr = Ptr2Func;
 abe:	89 81       	ldd	r24, Y+1	; 0x01
 ac0:	9a 81       	ldd	r25, Y+2	; 0x02
 ac2:	90 93 50 01 	sts	0x0150, r25
 ac6:	80 93 4f 01 	sts	0x014F, r24
}
 aca:	0f 90       	pop	r0
 acc:	0f 90       	pop	r0
 ace:	cf 91       	pop	r28
 ad0:	df 91       	pop	r29
 ad2:	08 95       	ret

00000ad4 <__vector_19>:
/*********************************************************************************************/
/* Interrupt Service Routine for Timer0 compare mode */
ISR(TIMER0_COMP_vect)
{
 ad4:	1f 92       	push	r1
 ad6:	0f 92       	push	r0
 ad8:	0f b6       	in	r0, 0x3f	; 63
 ada:	0f 92       	push	r0
 adc:	11 24       	eor	r1, r1
 ade:	2f 93       	push	r18
 ae0:	3f 93       	push	r19
 ae2:	4f 93       	push	r20
 ae4:	5f 93       	push	r21
 ae6:	6f 93       	push	r22
 ae8:	7f 93       	push	r23
 aea:	8f 93       	push	r24
 aec:	9f 93       	push	r25
 aee:	af 93       	push	r26
 af0:	bf 93       	push	r27
 af2:	ef 93       	push	r30
 af4:	ff 93       	push	r31
 af6:	df 93       	push	r29
 af8:	cf 93       	push	r28
 afa:	cd b7       	in	r28, 0x3d	; 61
 afc:	de b7       	in	r29, 0x3e	; 62
	/* Check if the Timer0_setCallBack is already called */
	if(g_Timer0_Call_Back_Ptr != NULL_PTR)
 afe:	80 91 4f 01 	lds	r24, 0x014F
 b02:	90 91 50 01 	lds	r25, 0x0150
 b06:	00 97       	sbiw	r24, 0x00	; 0
 b08:	29 f0       	breq	.+10     	; 0xb14 <__vector_19+0x40>
	{
		(*g_Timer0_Call_Back_Ptr)(); //call the function in the scheduler using call-back concept
 b0a:	e0 91 4f 01 	lds	r30, 0x014F
 b0e:	f0 91 50 01 	lds	r31, 0x0150
 b12:	09 95       	icall
	}
}
 b14:	cf 91       	pop	r28
 b16:	df 91       	pop	r29
 b18:	ff 91       	pop	r31
 b1a:	ef 91       	pop	r30
 b1c:	bf 91       	pop	r27
 b1e:	af 91       	pop	r26
 b20:	9f 91       	pop	r25
 b22:	8f 91       	pop	r24
 b24:	7f 91       	pop	r23
 b26:	6f 91       	pop	r22
 b28:	5f 91       	pop	r21
 b2a:	4f 91       	pop	r20
 b2c:	3f 91       	pop	r19
 b2e:	2f 91       	pop	r18
 b30:	0f 90       	pop	r0
 b32:	0f be       	out	0x3f, r0	; 63
 b34:	0f 90       	pop	r0
 b36:	1f 90       	pop	r1
 b38:	18 95       	reti

00000b3a <LED_setOn>:
//	Port_SetDirection(&g_LED_Config); // set the direction of the LED
//	Dio_WriteChannel(DioConf_LED_CHANNEL_ID_INDEX,LED_OFF); // LED OFF
//}
/*********************************************************************************************/
void LED_setOn(void)
{
 b3a:	df 93       	push	r29
 b3c:	cf 93       	push	r28
 b3e:	cd b7       	in	r28, 0x3d	; 61
 b40:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(DioConf_LED_CHANNEL_ID_INDEX,LED_ON); // LED ON
 b42:	80 e0       	ldi	r24, 0x00	; 0
 b44:	61 e0       	ldi	r22, 0x01	; 1
 b46:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Dio_WriteChannel>
}
 b4a:	cf 91       	pop	r28
 b4c:	df 91       	pop	r29
 b4e:	08 95       	ret

00000b50 <LED_setOff>:
/*********************************************************************************************/
void LED_setOff(void)
{
 b50:	df 93       	push	r29
 b52:	cf 93       	push	r28
 b54:	cd b7       	in	r28, 0x3d	; 61
 b56:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(DioConf_LED_CHANNEL_ID_INDEX,LED_OFF); // LED OFF
 b58:	80 e0       	ldi	r24, 0x00	; 0
 b5a:	60 e0       	ldi	r22, 0x00	; 0
 b5c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Dio_WriteChannel>
}
 b60:	cf 91       	pop	r28
 b62:	df 91       	pop	r29
 b64:	08 95       	ret

00000b66 <LED_refreshOutput>:
/*********************************************************************************************/
void LED_refreshOutput(void)
{
 b66:	df 93       	push	r29
 b68:	cf 93       	push	r28
 b6a:	0f 92       	push	r0
 b6c:	cd b7       	in	r28, 0x3d	; 61
 b6e:	de b7       	in	r29, 0x3e	; 62
	Dio_LevelType state = Dio_ReadChannel(DioConf_LED_CHANNEL_ID_INDEX);
 b70:	80 e0       	ldi	r24, 0x00	; 0
 b72:	0e 94 b7 03 	call	0x76e	; 0x76e <Dio_ReadChannel>
 b76:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DioConf_LED_CHANNEL_ID_INDEX,state); // re-write the same value
 b78:	80 e0       	ldi	r24, 0x00	; 0
 b7a:	69 81       	ldd	r22, Y+1	; 0x01
 b7c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Dio_WriteChannel>
}
 b80:	0f 90       	pop	r0
 b82:	cf 91       	pop	r28
 b84:	df 91       	pop	r29
 b86:	08 95       	ret

00000b88 <LED_toggle>:
/*********************************************************************************************/
void LED_toggle(void)
{
 b88:	df 93       	push	r29
 b8a:	cf 93       	push	r28
 b8c:	0f 92       	push	r0
 b8e:	cd b7       	in	r28, 0x3d	; 61
 b90:	de b7       	in	r29, 0x3e	; 62
	Dio_LevelType state = Dio_FlipChannel(DioConf_LED_CHANNEL_ID_INDEX);
 b92:	80 e0       	ldi	r24, 0x00	; 0
 b94:	0e 94 51 04 	call	0x8a2	; 0x8a2 <Dio_FlipChannel>
 b98:	89 83       	std	Y+1, r24	; 0x01
}
 b9a:	0f 90       	pop	r0
 b9c:	cf 91       	pop	r28
 b9e:	df 91       	pop	r29
 ba0:	08 95       	ret

00000ba2 <Os_start>:
/* Global variable to indicate the the timer has a new tick */
static uint8 g_New_Time_Tick_Flag = 0;

/*********************************************************************************************/
void Os_start(void)
{
 ba2:	df 93       	push	r29
 ba4:	cf 93       	push	r28
 ba6:	cd b7       	in	r28, 0x3d	; 61
 ba8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Set the Call Back function call to Scheduler_New_Timer_Tick
	 * this function will be called every Timer0 Compare Interrupt(20ms)
	 */
	Timer0_setCallBack(Os_newTimerTick);
 baa:	83 ee       	ldi	r24, 0xE3	; 227
 bac:	95 e0       	ldi	r25, 0x05	; 5
 bae:	0e 94 58 05 	call	0xab0	; 0xab0 <Timer0_setCallBack>

	/* Start Timer0 in Compare Mode to generate interrupt every 20ms */
	Timer0_start(OS_BASE_TIME);
 bb2:	84 e1       	ldi	r24, 0x14	; 20
 bb4:	0e 94 3c 05 	call	0xa78	; 0xa78 <Timer0_start>

	/* Execute the Init Task */
	Init_Task();
 bb8:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Init_Task>

	/* Start the Os Scheduler */
	Os_scheduler();
 bbc:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Os_scheduler>
}
 bc0:	cf 91       	pop	r28
 bc2:	df 91       	pop	r29
 bc4:	08 95       	ret

00000bc6 <Os_newTimerTick>:
/*********************************************************************************************/
void Os_newTimerTick(void)
{
 bc6:	df 93       	push	r29
 bc8:	cf 93       	push	r28
 bca:	cd b7       	in	r28, 0x3d	; 61
 bcc:	de b7       	in	r29, 0x3e	; 62
	/* increment the Os time by OS_BASE_TIME */
	g_Time_Tick_Count   += OS_BASE_TIME;
 bce:	80 91 51 01 	lds	r24, 0x0151
 bd2:	8c 5e       	subi	r24, 0xEC	; 236
 bd4:	80 93 51 01 	sts	0x0151, r24

	/* Set the flag to 1 to indicate that there is a new timer tick */
	g_New_Time_Tick_Flag = 1;
 bd8:	81 e0       	ldi	r24, 0x01	; 1
 bda:	80 93 52 01 	sts	0x0152, r24
}
 bde:	cf 91       	pop	r28
 be0:	df 91       	pop	r29
 be2:	08 95       	ret

00000be4 <Os_scheduler>:
/*********************************************************************************************/
void Os_scheduler(void)
{
 be4:	df 93       	push	r29
 be6:	cf 93       	push	r28
 be8:	00 d0       	rcall	.+0      	; 0xbea <Os_scheduler+0x6>
 bea:	cd b7       	in	r28, 0x3d	; 61
 bec:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		/* Code is only executed in case there is a new timer tick */
		if(g_New_Time_Tick_Flag == 1)
 bee:	80 91 52 01 	lds	r24, 0x0152
 bf2:	81 30       	cpi	r24, 0x01	; 1
 bf4:	e1 f7       	brne	.-8      	; 0xbee <Os_scheduler+0xa>
		{
			switch(g_Time_Tick_Count)
 bf6:	80 91 51 01 	lds	r24, 0x0151
 bfa:	28 2f       	mov	r18, r24
 bfc:	30 e0       	ldi	r19, 0x00	; 0
 bfe:	3a 83       	std	Y+2, r19	; 0x02
 c00:	29 83       	std	Y+1, r18	; 0x01
 c02:	89 81       	ldd	r24, Y+1	; 0x01
 c04:	9a 81       	ldd	r25, Y+2	; 0x02
 c06:	8c 33       	cpi	r24, 0x3C	; 60
 c08:	91 05       	cpc	r25, r1
 c0a:	61 f1       	breq	.+88     	; 0xc64 <Os_scheduler+0x80>
 c0c:	29 81       	ldd	r18, Y+1	; 0x01
 c0e:	3a 81       	ldd	r19, Y+2	; 0x02
 c10:	2d 33       	cpi	r18, 0x3D	; 61
 c12:	31 05       	cpc	r19, r1
 c14:	5c f4       	brge	.+22     	; 0xc2c <Os_scheduler+0x48>
 c16:	89 81       	ldd	r24, Y+1	; 0x01
 c18:	9a 81       	ldd	r25, Y+2	; 0x02
 c1a:	84 31       	cpi	r24, 0x14	; 20
 c1c:	91 05       	cpc	r25, r1
 c1e:	b1 f0       	breq	.+44     	; 0xc4c <Os_scheduler+0x68>
 c20:	29 81       	ldd	r18, Y+1	; 0x01
 c22:	3a 81       	ldd	r19, Y+2	; 0x02
 c24:	28 32       	cpi	r18, 0x28	; 40
 c26:	31 05       	cpc	r19, r1
 c28:	b1 f0       	breq	.+44     	; 0xc56 <Os_scheduler+0x72>
 c2a:	e1 cf       	rjmp	.-62     	; 0xbee <Os_scheduler+0xa>
 c2c:	89 81       	ldd	r24, Y+1	; 0x01
 c2e:	9a 81       	ldd	r25, Y+2	; 0x02
 c30:	84 36       	cpi	r24, 0x64	; 100
 c32:	91 05       	cpc	r25, r1
 c34:	59 f0       	breq	.+22     	; 0xc4c <Os_scheduler+0x68>
 c36:	29 81       	ldd	r18, Y+1	; 0x01
 c38:	3a 81       	ldd	r19, Y+2	; 0x02
 c3a:	28 37       	cpi	r18, 0x78	; 120
 c3c:	31 05       	cpc	r19, r1
 c3e:	c9 f0       	breq	.+50     	; 0xc72 <Os_scheduler+0x8e>
 c40:	89 81       	ldd	r24, Y+1	; 0x01
 c42:	9a 81       	ldd	r25, Y+2	; 0x02
 c44:	80 35       	cpi	r24, 0x50	; 80
 c46:	91 05       	cpc	r25, r1
 c48:	31 f0       	breq	.+12     	; 0xc56 <Os_scheduler+0x72>
 c4a:	d1 cf       	rjmp	.-94     	; 0xbee <Os_scheduler+0xa>
			{
				case 20:
				case 100:
					Button_Task();
 c4c:	0e 94 67 02 	call	0x4ce	; 0x4ce <Button_Task>
					g_New_Time_Tick_Flag = 0;
 c50:	10 92 52 01 	sts	0x0152, r1
 c54:	cc cf       	rjmp	.-104    	; 0xbee <Os_scheduler+0xa>
					break;
				case 40:
				case 80:
					Button_Task();
 c56:	0e 94 67 02 	call	0x4ce	; 0x4ce <Button_Task>
					Led_Task();
 c5a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <Led_Task>
					g_New_Time_Tick_Flag = 0;
 c5e:	10 92 52 01 	sts	0x0152, r1
 c62:	c5 cf       	rjmp	.-118    	; 0xbee <Os_scheduler+0xa>
					break;
				case 60:
					Button_Task();
 c64:	0e 94 67 02 	call	0x4ce	; 0x4ce <Button_Task>
					App_Task();
 c68:	0e 94 79 02 	call	0x4f2	; 0x4f2 <App_Task>
					g_New_Time_Tick_Flag = 0;
 c6c:	10 92 52 01 	sts	0x0152, r1
 c70:	be cf       	rjmp	.-132    	; 0xbee <Os_scheduler+0xa>
					break;
				case 120:
					Button_Task();
 c72:	0e 94 67 02 	call	0x4ce	; 0x4ce <Button_Task>
					App_Task();
 c76:	0e 94 79 02 	call	0x4f2	; 0x4f2 <App_Task>
					Led_Task();
 c7a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <Led_Task>
					g_New_Time_Tick_Flag = 0;
 c7e:	10 92 52 01 	sts	0x0152, r1
					g_Time_Tick_Count = 0;
 c82:	10 92 51 01 	sts	0x0151, r1
 c86:	b3 cf       	rjmp	.-154    	; 0xbee <Os_scheduler+0xa>

00000c88 <main>:
#include "Os.h"

int main(void)
{
 c88:	df 93       	push	r29
 c8a:	cf 93       	push	r28
 c8c:	cd b7       	in	r28, 0x3d	; 61
 c8e:	de b7       	in	r29, 0x3e	; 62
	/* Start the Os */
	Os_start();
 c90:	0e 94 d1 05 	call	0xba2	; 0xba2 <Os_start>
 c94:	80 e0       	ldi	r24, 0x00	; 0
 c96:	90 e0       	ldi	r25, 0x00	; 0
}
 c98:	cf 91       	pop	r28
 c9a:	df 91       	pop	r29
 c9c:	08 95       	ret

00000c9e <_exit>:
 c9e:	f8 94       	cli

00000ca0 <__stop_program>:
 ca0:	ff cf       	rjmp	.-2      	; 0xca0 <__stop_program>
